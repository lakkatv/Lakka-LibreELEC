diff --git a/configuration.c b/configuration.c
index 22de8d9805..26ed2bcaf4 100644
--- a/configuration.c
+++ b/configuration.c
@@ -2119,6 +2119,7 @@ void config_set_defaults(void)
    settings->bools.ssh_enable                  = filestream_exists(LAKKA_SSH_PATH);
    settings->bools.samba_enable                = filestream_exists(LAKKA_SAMBA_PATH);
    settings->bools.bluetooth_enable            = filestream_exists(LAKKA_BLUETOOTH_PATH);
+   settings->bools.localap_enable              = false;
 #endif
 
 #ifdef HAVE_MENU
diff --git a/configuration.h b/configuration.h
index 7107eb790d..e061c5d81b 100644
--- a/configuration.h
+++ b/configuration.h
@@ -349,6 +349,7 @@ typedef struct settings
       bool ssh_enable;
       bool samba_enable;
       bool bluetooth_enable;
+      bool localap_enable;
 
       bool automatically_add_content_to_playlist;
       bool video_window_show_decorations;
diff --git a/intl/msg_hash_ar.h b/intl/msg_hash_ar.h
index e303497e2c..7a63dc2748 100644
--- a/intl/msg_hash_ar.h
+++ b/intl/msg_hash_ar.h
@@ -4118,3 +4118,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_chs.h b/intl/msg_hash_chs.h
index f93e42aed4..4b871c10de 100644
--- a/intl/msg_hash_chs.h
+++ b/intl/msg_hash_chs.h
@@ -5136,3 +5136,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_cht.h b/intl/msg_hash_cht.h
index bbf27ff32d..7529d0720c 100644
--- a/intl/msg_hash_cht.h
+++ b/intl/msg_hash_cht.h
@@ -3894,3 +3894,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_de.h b/intl/msg_hash_de.h
index 1a21f5b29f..cc57dd66dd 100644
--- a/intl/msg_hash_de.h
+++ b/intl/msg_hash_de.h
@@ -4023,3 +4023,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_el.h b/intl/msg_hash_el.h
index fdc3312de8..38daad9888 100644
--- a/intl/msg_hash_el.h
+++ b/intl/msg_hash_el.h
@@ -8100,3 +8100,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_eo.h b/intl/msg_hash_eo.h
index 8cb5caefb0..db45dfbb36 100644
--- a/intl/msg_hash_eo.h
+++ b/intl/msg_hash_eo.h
@@ -3782,3 +3782,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_es.h b/intl/msg_hash_es.h
index c1474c335a..53e0b9a8a5 100644
--- a/intl/msg_hash_es.h
+++ b/intl/msg_hash_es.h
@@ -8252,3 +8252,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_fr.h b/intl/msg_hash_fr.h
index 8ebdd347bc..530e050178 100644
--- a/intl/msg_hash_fr.h
+++ b/intl/msg_hash_fr.h
@@ -9040,3 +9040,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_it.h b/intl/msg_hash_it.h
index 9585775e71..c9f013aea9 100644
--- a/intl/msg_hash_it.h
+++ b/intl/msg_hash_it.h
@@ -4003,3 +4003,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_ja.h b/intl/msg_hash_ja.h
index 814c498776..3b3ff21cdd 100644
--- a/intl/msg_hash_ja.h
+++ b/intl/msg_hash_ja.h
@@ -9745,3 +9745,23 @@ MSG_HASH(
     MENU_ENUM_LABEL_VALUE_VIDEO_SHADER_DELAY,
     "シェーダの自動ロード遅延 (ms)"
     )
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_ko.h b/intl/msg_hash_ko.h
index 8dbf7af14f..a1f10de1ce 100644
--- a/intl/msg_hash_ko.h
+++ b/intl/msg_hash_ko.h
@@ -9603,3 +9603,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_MENU_XMB_ANIMATION_MOVE_UP_DOWN,
       "위 아래를 움직일때 발생하는 애니메이션입니다.")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_XMB_ANIMATION_OPENING_MAIN_MENU,
       "메뉴를 열때 발생하는 애니메이션입니다.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_lbl.h b/intl/msg_hash_lbl.h
index 4fcf775066..f419a8a16c 100644
--- a/intl/msg_hash_lbl.h
+++ b/intl/msg_hash_lbl.h
@@ -2081,3 +2081,7 @@ MSG_HASH(MENU_ENUM_LABEL_FRAME_TIME_COUNTER_RESET_AFTER_LOAD_STATE,
       "frame_time_counter_reset_after_load_state")
 MSG_HASH(MENU_ENUM_LABEL_FRAME_TIME_COUNTER_RESET_AFTER_SAVE_STATE,
       "frame_time_counter_reset_after_save_state")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_LOCALAP_ENABLE,
+      "localap_enable")
+#endif
diff --git a/intl/msg_hash_nl.h b/intl/msg_hash_nl.h
index b5e3f66148..812b42d2ef 100644
--- a/intl/msg_hash_nl.h
+++ b/intl/msg_hash_nl.h
@@ -3776,3 +3776,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_pl.h b/intl/msg_hash_pl.h
index 52763d91bd..2f62005d06 100644
--- a/intl/msg_hash_pl.h
+++ b/intl/msg_hash_pl.h
@@ -4622,3 +4622,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FPS_UPDATE_INTERVAL,
  MSG_HASH(MENU_ENUM_SUBLABEL_START_CORE,
     "Zacznij rdzeń bez zawartości."
     )
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_pt_br.h b/intl/msg_hash_pt_br.h
index ee5c1a7fd4..efdf3646ea 100644
--- a/intl/msg_hash_pt_br.h
+++ b/intl/msg_hash_pt_br.h
@@ -9607,3 +9607,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_MENU_XMB_ANIMATION_MOVE_UP_DOWN,
       "A animação que é acionada ao mover para cima ou para baixo.")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_XMB_ANIMATION_OPENING_MAIN_MENU,
       "A animação que é acionada ao abrir um submenu.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_pt_pt.h b/intl/msg_hash_pt_pt.h
index 6343264d37..8ca03fa6e8 100644
--- a/intl/msg_hash_pt_pt.h
+++ b/intl/msg_hash_pt_pt.h
@@ -3848,3 +3848,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_ru.h b/intl/msg_hash_ru.h
index 8c8ee89e52..6a8f498122 100644
--- a/intl/msg_hash_ru.h
+++ b/intl/msg_hash_ru.h
@@ -4046,3 +4046,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_tr.h b/intl/msg_hash_tr.h
index fc17b23fda..24749dc307 100644
--- a/intl/msg_hash_tr.h
+++ b/intl/msg_hash_tr.h
@@ -9052,3 +9052,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Kare zaman sayacını etkileyen ayarları yapın (yalnızca threaded video devre dışı olduğunda etkindir).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Yalnızca eski metin sistemi yerine modern dekore edilmiş animasyonları, bildirimleri, göstergeleri ve kontrolleri kullanın.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_us.h b/intl/msg_hash_us.h
index 616e31150e..30bedd80e5 100644
--- a/intl/msg_hash_us.h
+++ b/intl/msg_hash_us.h
@@ -9682,3 +9682,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_MENU_XMB_ANIMATION_MOVE_UP_DOWN,
       "The animation that triggers when moving up or down.")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_XMB_ANIMATION_OPENING_MAIN_MENU,
       "The animation that triggers when opening a submenu.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/intl/msg_hash_vn.h b/intl/msg_hash_vn.h
index e2641541eb..b83084c5ee 100644
--- a/intl/msg_hash_vn.h
+++ b/intl/msg_hash_vn.h
@@ -3938,3 +3938,23 @@ MSG_HASH(MENU_ENUM_SUBLABEL_FRAME_TIME_COUNTER_SETTINGS,
       "Adjust settings influencing the frame time counter (only active when threaded video is disabled).")
 MSG_HASH(MENU_ENUM_SUBLABEL_MENU_WIDGETS_ENABLE,
       "Use modern decorated animations, notifications, indicators and controls instead of the old text only system.")
+#ifdef HAVE_LAKKA
+MSG_HASH(MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+      "Wi-Fi Access Point")
+MSG_HASH(MENU_ENUM_SUBLABEL_LOCALAP_ENABLE,
+      "Enable or disable Wi-Fi Access Point.")
+MSG_HASH(MSG_LOCALAP_SWITCHING_OFF,
+      "Switching off Wi-Fi Access Point.")
+MSG_HASH(MSG_WIFI_DISCONNECT_FROM,
+      "Disconnecting from Wi-Fi '%s'")
+MSG_HASH(MSG_LOCALAP_ALREADY_RUNNING,
+      "Wi-Fi Access Point is already started")
+MSG_HASH(MSG_LOCALAP_NOT_RUNNING,
+      "Wi-Fi Access Point is not running")
+MSG_HASH(MSG_LOCALAP_STARTING,
+      "Starting Wi-Fi Access Point with SSID=%s and Passkey=%s")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_CREATE,
+      "Could not create Wi-Fi Access Point configuration file.")
+MSG_HASH(MSG_LOCALAP_ERROR_CONFIG_PARSE,
+     "Wrong configuration file - could not find APNAME or PASSWORD in %s")
+#endif
diff --git a/lakka.h b/lakka.h
index 2b6073ead4..f098a1080c 100644
--- a/lakka.h
+++ b/lakka.h
@@ -23,6 +23,7 @@
 #define LAKKA_BLUETOOTH_PATH "/storage/.cache/services/bluez.conf"
 #define LAKKA_UPDATE_DIR     "/storage/.update/"
 #define LAKKA_CONNMAN_DIR    "/storage/.cache/connman/"
+#define LAKKA_LOCALAP_PATH   "/storage/.cache/services/localap.conf"
 
 #include "switch_performance_profiles.h"
 
diff --git a/menu/cbs/menu_cbs_sublabel.c b/menu/cbs/menu_cbs_sublabel.c
index bca7592059..254f13f745 100644
--- a/menu/cbs/menu_cbs_sublabel.c
+++ b/menu/cbs/menu_cbs_sublabel.c
@@ -194,6 +194,7 @@ default_sublabel_macro(action_bind_sublabel_services_settings_list,        MENU_
 default_sublabel_macro(action_bind_sublabel_ssh_enable,                    MENU_ENUM_SUBLABEL_SSH_ENABLE)
 default_sublabel_macro(action_bind_sublabel_samba_enable,                  MENU_ENUM_SUBLABEL_SAMBA_ENABLE )
 default_sublabel_macro(action_bind_sublabel_bluetooth_enable,              MENU_ENUM_SUBLABEL_BLUETOOTH_ENABLE )
+default_sublabel_macro(action_bind_sublabel_localap_enable,                MENU_ENUM_SUBLABEL_LOCALAP_ENABLE )
 default_sublabel_macro(action_bind_sublabel_user_language,                 MENU_ENUM_SUBLABEL_USER_LANGUAGE)
 default_sublabel_macro(action_bind_sublabel_max_swapchain_images,          MENU_ENUM_SUBLABEL_VIDEO_MAX_SWAPCHAIN_IMAGES )
 default_sublabel_macro(action_bind_sublabel_online_updater,                MENU_ENUM_SUBLABEL_ONLINE_UPDATER)
@@ -2786,6 +2787,9 @@ int menu_cbs_init_bind_sublabel(menu_file_list_cbs_t *cbs,
          case MENU_ENUM_LABEL_BLUETOOTH_ENABLE:
             BIND_ACTION_SUBLABEL(cbs, action_bind_sublabel_bluetooth_enable);
             break;
+         case MENU_ENUM_LABEL_LOCALAP_ENABLE:
+            BIND_ACTION_SUBLABEL(cbs, action_bind_sublabel_localap_enable);
+            break;
          case MENU_ENUM_LABEL_USER_LANGUAGE:
             BIND_ACTION_SUBLABEL(cbs, action_bind_sublabel_user_language);
             break;
diff --git a/menu/menu_displaylist.c b/menu/menu_displaylist.c
index 302b62b813..483bc3cc4f 100644
--- a/menu/menu_displaylist.c
+++ b/menu/menu_displaylist.c
@@ -4651,6 +4651,7 @@ unsigned menu_displaylist_build_list(file_list_t *list, enum menu_displaylist_ct
                {MENU_ENUM_LABEL_SSH_ENABLE,                                            PARSE_ONLY_BOOL},
                {MENU_ENUM_LABEL_SAMBA_ENABLE,                                          PARSE_ONLY_BOOL},
                {MENU_ENUM_LABEL_BLUETOOTH_ENABLE,                                      PARSE_ONLY_BOOL},
+               {MENU_ENUM_LABEL_LOCALAP_ENABLE,                                        PARSE_ONLY_BOOL},
             };
 
             for (i = 0; i < ARRAY_SIZE(build_list); i++)
diff --git a/menu/menu_setting.c b/menu/menu_setting.c
index fbf5d0736a..e40e524085 100644
--- a/menu/menu_setting.c
+++ b/menu/menu_setting.c
@@ -6537,6 +6537,17 @@ static void bluetooth_enable_toggle_change_handler(void *data)
    systemd_service_toggle(LAKKA_BLUETOOTH_PATH, (char*)"bluetooth.service",
          enable);
 }
+
+static void localap_enable_toggle_change_handler(void *data)
+{
+   bool enable           = false;
+   settings_t *settings  = config_get_ptr();
+
+   if (settings && settings->bools.localap_enable)
+      enable = true;
+
+   driver_wifi_tether_start_stop(enable, LAKKA_LOCALAP_PATH);
+}
 #endif
 
 static bool setting_append_list_input_player_options(
@@ -15152,6 +15163,22 @@ static bool setting_append_list(
                   SD_FLAG_NONE);
             (*list)[list_info->index - 1].change_handler = bluetooth_enable_toggle_change_handler;
 
+            CONFIG_BOOL(
+                  list, list_info,
+                  &settings->bools.localap_enable,
+                  MENU_ENUM_LABEL_LOCALAP_ENABLE,
+                  MENU_ENUM_LABEL_VALUE_LOCALAP_ENABLE,
+                  true,
+                  MENU_ENUM_LABEL_VALUE_OFF,
+                  MENU_ENUM_LABEL_VALUE_ON,
+                  &group_info,
+                  &subgroup_info,
+                  parent_group,
+                  general_write_handler,
+                  general_read_handler,
+                  SD_FLAG_NONE);
+            (*list)[list_info->index - 1].change_handler = localap_enable_toggle_change_handler;
+
             END_SUB_GROUP(list, list_info, parent_group);
             END_GROUP(list, list_info, parent_group);
 #endif
diff --git a/msg_hash.h b/msg_hash.h
index 9c614e0f6f..ecaa19a380 100644
--- a/msg_hash.h
+++ b/msg_hash.h
@@ -447,6 +447,15 @@ enum msg_hash_enums
    MSG_RUNAHEAD_FAILED_TO_LOAD_STATE,
    MSG_RUNAHEAD_FAILED_TO_CREATE_SECONDARY_INSTANCE,
    MSG_MISSING_ASSETS,
+#ifdef HAVE_LAKKA
+   MSG_LOCALAP_SWITCHING_OFF,
+   MSG_WIFI_DISCONNECT_FROM,
+   MSG_LOCALAP_ALREADY_RUNNING,
+   MSG_LOCALAP_NOT_RUNNING,
+   MSG_LOCALAP_STARTING,
+   MSG_LOCALAP_ERROR_CONFIG_CREATE,
+   MSG_LOCALAP_ERROR_CONFIG_PARSE,
+#endif
 
    MENU_LABEL(MENU_XMB_ANIMATION_HORIZONTAL_HIGHLIGHT),
    MENU_LABEL(MENU_XMB_ANIMATION_MOVE_UP_DOWN),
@@ -1518,9 +1527,12 @@ enum msg_hash_enums
    MENU_ENUM_LABEL_OVERLAY_NEXT,
 
    MENU_LABEL(NETPLAY_ENABLE),
+#ifdef HAVE_LAKKA
    MENU_LABEL(SSH_ENABLE),
    MENU_LABEL(SAMBA_ENABLE),
    MENU_LABEL(BLUETOOTH_ENABLE),
+   MENU_LABEL(LOCALAP_ENABLE),
+#endif
    MENU_LABEL(NETPLAY_DELAY_FRAMES),
    MENU_LABEL(NETPLAY_PUBLIC_ANNOUNCE),
    MENU_LABEL(NETPLAY_START_AS_SPECTATOR),
diff --git a/retroarch.c b/retroarch.c
index 6db7a8395a..66239d6d99 100644
--- a/retroarch.c
+++ b/retroarch.c
@@ -9291,6 +9291,11 @@ bool driver_wifi_connect_ssid(unsigned i, const char* passphrase)
    return wifi_driver->connect_ssid(i, passphrase);
 }
 
+void driver_wifi_tether_start_stop(bool start, char* configfile)
+{
+   wifi_driver->tether_start_stop(start, configfile);
+}
+
 bool wifi_driver_ctl(enum rarch_wifi_ctl_state state, void *data)
 {
 
diff --git a/wifi/drivers/connmanctl.c b/wifi/drivers/connmanctl.c
index ff9dc58808..ecac5e1064 100644
--- a/wifi/drivers/connmanctl.c
+++ b/wifi/drivers/connmanctl.c
@@ -17,6 +17,8 @@
 #include <file/file_path.h>
 #include <string/stdstring.h>
 #include <retro_miscellaneous.h>
+#include <configuration.h>
+#include <verbosity.h>
 
 #include "../wifi_driver.h"
 #include "../../retroarch.h"
@@ -28,6 +30,7 @@
 static bool connman_cache[256]   = {0};
 static unsigned connman_counter  = 0;
 static struct string_list* lines = NULL;
+static char command[256]         = {0};
 
 static void *connmanctl_init(void)
 {
@@ -50,22 +53,123 @@ static void connmanctl_stop(void *data)
    (void)data;
 }
 
+static bool connmanctl_tether_status(void)
+{
+   /* Returns true if the tethering is active
+    * false when tethering is not active
+    */
+   FILE *command_file = NULL;
+   char ln[3]         = {0};
+
+   /* Following command lists 'technologies' of connman,
+    * greps the wifi + 10 following lines, then first
+    * occurance of 'Tethering', then 'True' and counts
+    * the matching lines.
+    * Expected result is either 1 (active) or 0 (not active)
+    */
+   snprintf(command, sizeof(command), "\
+         connmanctl technologies | \
+         grep \"/net/connman/technology/wifi\" -A 10 | \
+         grep \"^  Tethering =\" -m 1 | \
+         grep \"True\" | \
+         wc -l");
+
+   command_file = popen(command, "r");
+
+   fgets(ln, sizeof(ln), command_file);
+
+   if (ln[strlen(ln)-1] == '\n')
+      ln[strlen(ln)-1] = '\0';
+
+   RARCH_LOG("[CONNMANCTL] Tether Status: command: \"%s\", output: \"%s\"\n",
+         command, ln);
+
+   pclose(command_file);
+
+   if (ln == NULL)
+      return false;
+   else if (ln[0] == '0')
+      return false;
+   else if (ln[0] == '1')
+      return true;
+   else
+      return false;
+}
+
+static void connmanctl_tether_toggle(bool switch_on, char* apname, char* passkey)
+{
+   /* Starts / stops the tethering service on wi-fi device */
+   char output[256]     = {0};
+   FILE *command_file   = NULL;
+   settings_t *settings = config_get_ptr();
+
+   snprintf(command, sizeof(command), "\
+         connmanctl tether wifi %s %s %s",
+         switch_on ? "on" : "off", apname, passkey);
+
+   command_file = popen(command, "r");
+
+   RARCH_LOG("[CONNMANCTL] Tether toggle: command: \"%s\"\n",
+         command);
+
+   while (fgets(output, sizeof(output), command_file) != NULL)
+   {
+      if (output[strlen(output)-1] == '\n')
+         output[strlen(output)-1] = '\0';
+
+      RARCH_LOG("[CONNMANCTL] Tether toggle: output: \"%s\"\n",
+            output);
+
+#ifdef HAVE_MENU_WIDGETS
+      if (!menu_widgets_ready())
+#endif
+         runloop_msg_queue_push(output, 1, 180, true,
+               NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+               MESSAGE_QUEUE_CATEGORY_INFO);
+   }
+
+   pclose(command_file);
+
+   RARCH_LOG("[CONNMANCTL] Tether toggle: command finished\n");
+
+   if (switch_on)
+   {
+      if (!connmanctl_tether_status())
+          settings->bools.localap_enable = false;
+   }
+   else
+   {
+      if (connmanctl_tether_status())
+         settings->bools.localap_enable = true;
+   }
+}
+
 static void connmanctl_scan(void)
 {
    char line[512];
    union string_list_elem_attr attr;
    FILE *serv_file                  = NULL;
+   settings_t *settings             = config_get_ptr();
 
    attr.i = RARCH_FILETYPE_UNSET;
    if (lines)
       free(lines);
    lines = string_list_new();
 
+   if (connmanctl_tether_status())
+   {
+      runloop_msg_queue_push(msg_hash_to_str(MSG_LOCALAP_SWITCHING_OFF),
+            1, 180, true, NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+            MESSAGE_QUEUE_CATEGORY_INFO);
+      settings->bools.localap_enable = false;
+      connmanctl_tether_toggle(false, "", "");
+   }
+
    pclose(popen("connmanctl enable wifi", "r"));
 
    pclose(popen("connmanctl scan wifi", "r"));
 
-   runloop_msg_queue_push("Wi-Fi scan complete.",
+   runloop_msg_queue_push(msg_hash_to_str(MSG_WIFI_SCAN_COMPLETE),
          1, 180, true, NULL, MESSAGE_QUEUE_ICON_DEFAULT,
          MESSAGE_QUEUE_CATEGORY_INFO);
 
@@ -104,7 +208,6 @@ static bool connmanctl_ssid_is_online(unsigned i)
 {
    char ln[512]       = {0};
    char service[128]  = {0};
-   char command[256]  = {0};
    const char *line   = lines->elems[i].data;
    FILE *command_file = NULL;
 
@@ -125,12 +228,9 @@ static bool connmanctl_ssid_is_online(unsigned i)
       strlcpy(service, list->elems[list->size-1].data, sizeof(service));
       string_list_free(list);
 
-      strlcat(command, "connmanctl services ",
-            sizeof(command));
-      strlcat(command, service,
-            sizeof(command));
-      strlcat(command, " | grep 'State = \\(online\\|ready\\)'",
-            sizeof(command));
+      snprintf(command, sizeof(command), "\
+            connmanctl services %s | grep 'State = \\(online\\|ready\\)'",
+            service);
 
       command_file = popen(command, "r");
 
@@ -156,15 +256,15 @@ static bool connmanctl_connect_ssid(unsigned i, const char* passphrase)
    char ln[512]                        = {0};
    char name[64]                       = {0};
    char service[128]                   = {0};
-   char command[256]                   = {0};
    char settings_dir[PATH_MAX_LENGTH]  = {0};
    char settings_path[PATH_MAX_LENGTH] = {0};
    FILE *command_file                  = NULL;
    FILE *settings_file                 = NULL;
    const char *line                    = lines->elems[i].data;
+   settings_t *settings                = config_get_ptr();
 
    static struct string_list* list     = NULL;
-   /* connmanctl services outputs a 4 character prefixed lines, 
+   /* connmanctl services outputs a 4 character prefixed lines,
     * either whitespace or an identifier. i.e.:
     * $ connmanctl services
     *     '*A0 SSID some_unique_id'
@@ -212,15 +312,24 @@ static bool connmanctl_connect_ssid(unsigned i, const char* passphrase)
    fprintf(settings_file, "IPv4.method=%s\n", "dhcp");
    fclose(settings_file);
 
+   if (connmanctl_tether_status())
+   {
+      runloop_msg_queue_push(msg_hash_to_str(MSG_LOCALAP_SWITCHING_OFF),
+            1, 180, true, NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+            MESSAGE_QUEUE_CATEGORY_INFO);
+      settings->bools.localap_enable = false;
+      connmanctl_tether_toggle(false, "", "");
+   }
+
    pclose(popen("systemctl restart connman", "r"));
 
-   strlcat(command, "connmanctl connect ", sizeof(command));
-   strlcat(command, service, sizeof(command));
-   strlcat(command, " 2>&1", sizeof(command));
+   snprintf(command, sizeof(command), "\
+         connmanctl connect %s 2>&1",
+         service);
 
    command_file = popen(command, "r");
 
-   while (fgets (ln, 512, command_file) != NULL)
+   while (fgets (ln, sizeof(ln), command_file) != NULL)
    {
 #ifdef HAVE_MENU_WIDGETS
       if (!menu_widgets_ready())
@@ -234,6 +343,349 @@ static bool connmanctl_connect_ssid(unsigned i, const char* passphrase)
    return true;
 }
 
+static void connmanctl_get_connected_ssid(char* ssid, size_t buffersize)
+{
+   /* Stores the SSID of the currently connected Wi-Fi
+    * network in ssid
+    */
+   FILE *command_file = NULL;
+
+   if (buffersize < 1)
+      return;
+
+   /* Following command lists all connman services, greps
+    * only 'wifi_' services, then greps the one with
+    * 'R' (Ready) or 'O' (Online) flag and cuts out the ssid
+    */
+   snprintf(command, sizeof(command), "\
+         connmanctl services | \
+         grep wifi_ | \
+         grep \"^..\\(R\\|O\\)\" | \
+         cut -d' ' -f 2");
+
+   command_file = popen(command, "r");
+
+   fgets(ssid, buffersize, command_file);
+
+   pclose(command_file);
+
+   if (strlen(ssid) > 0)
+      if (ssid[strlen(ssid)-1] == '\n')
+         ssid[strlen(ssid)-1] = '\0';
+
+   RARCH_LOG("[CONNMANCTL] Get Connected SSID: command: \"%s\", output: \"%s\"\n",
+         command, strlen(ssid) ? ssid : "<nothing_found>");
+}
+
+static void connmanctl_get_connected_servicename(char* servicename, size_t buffersize)
+{
+   /* Stores the service name of currently connected Wi-Fi
+    * network in servicename
+    */
+   FILE *command_file = NULL;
+   FILE *service_file = NULL;
+   char ln[3]         = {0};
+   char *temp;
+
+   if (buffersize < 1)
+      return;
+
+   temp = (char*)malloc(sizeof(char) * buffersize);
+
+   /* Following command lists all stored services in
+    * connman settings folder, which are then used in
+    * the next while loop for parsing if the service
+    * is currently online/ready
+    */
+   snprintf(command, sizeof(command), "\
+         for serv in %s/wifi_*/ ; do \
+            if [ -d $serv ] ; then \
+               basename $serv ; \
+            fi ; \
+         done",
+         LAKKA_CONNMAN_DIR);
+
+   command_file = popen(command, "r");
+
+   RARCH_LOG("[CONNMANCTL] Testing configured services for activity: command: \"%s\"\n",
+         command);
+
+   while (fgets(temp, buffersize, command_file) != NULL)
+   {
+      if (strlen(temp) > 0)
+         if (temp[strlen(temp)-1] == '\n')
+            temp[strlen(temp)-1] = '\0';
+
+      if (strlen(temp) == 0)
+      {
+         RARCH_WARN("[CONNMANCTL] Service name empty.\n");
+         continue;
+      }
+
+      /* Here we test the found service for online | ready
+       * status and count the lines. Expected results are
+       * 0 = is not active, 1 = is active
+       */
+      snprintf(command, sizeof(command), "\
+            connmanctl services %s | \
+            grep \"^  State = \\(online\\|ready\\)\" | \
+            wc -l",
+            temp);
+
+      service_file = popen(command, "r");
+
+      fgets(ln, sizeof(ln), service_file);
+
+      if (ln[strlen(ln)-1] == '\n')
+         ln[strlen(ln)-1] = '\0';
+
+      pclose(service_file);
+
+      RARCH_LOG("[CONNMANCTL] Service: \"%s\", status: \"%s\"\n",
+            temp, ln);
+
+      if (ln[0] == '1')
+      {
+         pclose(command_file);
+
+         strlcpy(servicename, temp, buffersize);
+
+         free(temp);
+
+         RARCH_LOG("[CONNMANCTL] Service \"%s\" considered as currently online\n",
+               servicename);
+
+         return;
+      }
+   }
+
+   pclose(command_file);
+}
+
+static void connmanctl_tether_start_stop(bool start, char* configfile)
+{
+   /* Start / stop wrapper for the tethering service
+    * It also checks, if we are currently connected
+    * to a wi-fi network, which needs to be disconnected
+    * before starting the tethering service, or if the
+    * tethering service is already running / not running
+    * before performing the desired action
+    */
+   FILE *command_file = NULL;
+   char apname[64]    = {0};
+   char passkey[256]  = {0};
+   char ln[512]       = {0};
+   char ssid[64]      = {0};
+   char service[256]  = {0};
+
+   RARCH_LOG("[CONNMANCTL] Tether start stop: begin\n");
+
+   if (start) /* we want to start tethering */
+   {
+      RARCH_LOG("[CONNMANCTL] Tether start stop: request to start access point\n");
+
+      if (connmanctl_tether_status()) /* check if already tethering and bail out if so */
+      {
+         RARCH_LOG("[CONNMANCTL] Tether start stop: AP already running\n");
+         runloop_msg_queue_push(msg_hash_to_str(MSG_LOCALAP_ALREADY_RUNNING),
+               1, 180, true, NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+               MESSAGE_QUEUE_CATEGORY_INFO);
+         return;
+      }
+
+      /* check if there is a config file, if not, create one, if yes, parse it */
+      if (!(command_file = fopen(configfile, "r")))
+      {
+         RARCH_WARN("[CONNMANCTL] Tether start stop: config \"%s\" does not exist\n",
+               configfile);
+
+         if (!(command_file = fopen(configfile, "w")))
+         {
+            RARCH_ERR("[CONNMANCTL] Tether start stop: cannot create config file \"%s\"\n",
+                  configfile);
+
+            runloop_msg_queue_push(msg_hash_to_str(MSG_LOCALAP_ERROR_CONFIG_CREATE),
+                  1, 180, true, NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+                  MESSAGE_QUEUE_CATEGORY_ERROR);
+
+            return;
+         }
+
+         RARCH_LOG("[CONNMANCTL] Tether start stop: creating new config \"%s\"\n",
+               configfile);
+
+         snprintf(apname, sizeof(apname), "LakkaAccessPoint");
+         snprintf(passkey, sizeof(passkey), "RetroArch");
+
+         fprintf(command_file, "APNAME=%s\nPASSWORD=%s", apname, passkey);
+
+         fclose(command_file);
+
+         RARCH_LOG("[CONNMANCTL] Tether start stop: new config \"%s\" created\n",
+               configfile);
+      }
+      else
+      {
+         fclose(command_file);
+
+         RARCH_LOG("[CONNMANCTL] Tether start stop: config \"%s\" exists, reading it\n",
+               configfile);
+
+         snprintf(command, sizeof(command), "\
+               grep -m 1 \"^APNAME=\" %s | cut -d '=' -f 2- && \
+               grep -m 1 \"^PASSWORD=\" %s | cut -d '=' -f 2-",
+               configfile, configfile);
+
+         command_file = popen(command, "r");
+
+         int i = 0;
+
+         RARCH_LOG("[CONNMANCTL] Tether start stop: parsing command: \"%s\"\n",
+               command);
+
+         while (fgets(ln, sizeof(ln), command_file) != NULL)
+         {
+            i++;
+            if (strlen(ln) > 1)
+            {
+               if (ln[strlen(ln)-1] == '\n')
+                  ln[strlen(ln)-1] = '\0';
+
+               if (i == 1)
+               {
+                  strlcpy(apname, ln, sizeof(apname));
+
+                  RARCH_LOG("[CONNMANCTL] Tether start stop: found APNAME: \"%s\"\n",
+                        apname);
+
+                  continue;
+               }
+
+               if (i == 2)
+               {
+                  strlcpy(passkey, ln, sizeof(passkey));
+
+                  RARCH_LOG("[CONNMANCTL] Tether start stop: found PASSWORD: \"%s\"\n",
+                        passkey);
+
+                  continue;
+               }
+
+               if (i > 2)
+               {
+                  RARCH_WARN("[CONNMANCTL] Tether start stop: you should not get here...\n");
+                  break;
+               }
+            }
+         }
+
+         pclose(command_file);
+      }
+
+      if (apname == NULL || passkey == NULL)
+      {
+         RARCH_ERR("[CONNMANCTL] Tether start stop: APNAME or PASSWORD missing\n");
+
+         snprintf(ln, sizeof(ln),
+               msg_hash_to_str(MSG_LOCALAP_ERROR_CONFIG_PARSE),
+               configfile);
+
+         runloop_msg_queue_push(ln,
+               1, 180, true, NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+               MESSAGE_QUEUE_CATEGORY_ERROR);
+
+         return;
+      }
+
+      /* check if connected to a wi-fi network */
+      RARCH_LOG("[CONNMANCTL] Tether start stop: checking if not connected to a wi-fi network...\n");
+      connmanctl_get_connected_ssid(ssid, sizeof(ssid));
+
+      if (strlen(ssid) != 0)
+      {
+         connmanctl_get_connected_servicename(service, sizeof(service));
+
+         if (strlen(service) != 0)
+         {
+            /* disconnect from wi-fi network */
+            RARCH_LOG("[CONNMANCTL] Tether start stop: connected to SSID \"%s\", service \"%s\"\n",
+                  ssid, service);
+
+            snprintf(ln, sizeof(ln),
+                  msg_hash_to_str(MSG_WIFI_DISCONNECT_FROM),
+                  ssid);
+
+            runloop_msg_queue_push(ln, 1, 180, true,
+                  NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+                  MESSAGE_QUEUE_CATEGORY_INFO);
+
+            snprintf(command, sizeof(command), "\
+                  connmanctl disconnect %s",
+                  service);
+
+            command_file = popen(command, "r");
+
+            RARCH_LOG("[CONNMANCTL] Tether start stop: disconnecting from service \"%s\", command: \"%s\"\n",
+                  service, command);
+
+            while (fgets(ln, sizeof(ln), command_file) != NULL)
+            {
+               if (ln[strlen(ln)-1] == '\n')
+                  ln[strlen(ln)-1] = '\0';
+
+               RARCH_LOG("[CONNMANCTL] Tether start stop: output: \"%s\"\n",
+                     ln);
+
+#ifdef HAVE_MENU_WIDGETS
+               if (!menu_widgets_ready())
+#endif
+                  runloop_msg_queue_push(ln, 1, 180, true,
+                        NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+                        MESSAGE_QUEUE_CATEGORY_INFO);
+            }
+
+            pclose(command_file);
+
+            RARCH_LOG("[CONNMANCTL] Tether start stop: disconnect end\n");
+         }
+      }
+
+      snprintf(command, sizeof(command),
+            msg_hash_to_str(MSG_LOCALAP_STARTING),
+            apname, passkey);
+
+      runloop_msg_queue_push(command,
+            1, 180, true, NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+            MESSAGE_QUEUE_CATEGORY_INFO);
+   }
+   else /* we want to stop tethering */
+   {
+      RARCH_LOG("[CONNMANCTL] Tether start stop: request to stop access point\n");
+
+      if (!connmanctl_tether_status()) /* check if not tethering and when not, bail out */
+      {
+         RARCH_LOG("[CONNMANCTL] Tether start stop: access point is not running\n");
+
+         runloop_msg_queue_push(msg_hash_to_str(MSG_LOCALAP_NOT_RUNNING),
+               1, 180, true, NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+               MESSAGE_QUEUE_CATEGORY_INFO);
+
+         return;
+      }
+
+      runloop_msg_queue_push(msg_hash_to_str(MSG_LOCALAP_SWITCHING_OFF),
+            1, 180, true, NULL, MESSAGE_QUEUE_ICON_DEFAULT,
+            MESSAGE_QUEUE_CATEGORY_INFO);
+   }
+
+   RARCH_LOG("[CONNMANCTL] Tether start stop: calling tether_toggle()\n");
+
+   /* call the tether toggle function */
+   connmanctl_tether_toggle(start, apname, passkey);
+
+   RARCH_LOG("[CONNMANCTL] Tether start stop: end\n");
+}
+
 wifi_driver_t wifi_connmanctl = {
    connmanctl_init,
    connmanctl_free,
@@ -243,5 +695,6 @@ wifi_driver_t wifi_connmanctl = {
    connmanctl_get_ssids,
    connmanctl_ssid_is_online,
    connmanctl_connect_ssid,
+   connmanctl_tether_start_stop,
    "connmanctl",
 };
diff --git a/wifi/drivers/nullwifi.c b/wifi/drivers/nullwifi.c
index 967191325d..1488d822db 100644
--- a/wifi/drivers/nullwifi.c
+++ b/wifi/drivers/nullwifi.c
@@ -54,6 +54,10 @@ static bool nullwifi_connect_ssid(unsigned i, const char* passphrase)
    return false;
 }
 
+static void nullwifi_tether_start_stop(bool start, char* configfile)
+{
+}
+
 wifi_driver_t wifi_null = {
    nullwifi_init,
    nullwifi_free,
@@ -63,5 +67,6 @@ wifi_driver_t wifi_null = {
    nullwifi_get_ssids,
    nullwifi_ssid_is_online,
    nullwifi_connect_ssid,
+   nullwifi_tether_start_stop,
    "null",
 };
diff --git a/wifi/wifi_driver.h b/wifi/wifi_driver.h
index 586f9c4079..524b065768 100644
--- a/wifi/wifi_driver.h
+++ b/wifi/wifi_driver.h
@@ -54,6 +54,7 @@ typedef struct wifi_driver
    void (*get_ssids)(struct string_list *list);
    bool (*ssid_is_online)(unsigned i);
    bool (*connect_ssid)(unsigned i, const char* passphrase);
+   void (*tether_start_stop)(bool start, char* configfile);
 
    const char *ident;
 } wifi_driver_t;
@@ -102,6 +103,8 @@ bool driver_wifi_ssid_is_online(unsigned i);
 
 bool driver_wifi_connect_ssid(unsigned i, const char* passphrase);
 
+void driver_wifi_tether_start_stop(bool start, char* configfile);
+
 bool wifi_driver_ctl(enum rarch_wifi_ctl_state state, void *data);
 
 RETRO_END_DECLS
